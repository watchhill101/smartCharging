import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import StationDetail, { StationDetailData, ChargingPile } from '../index';

// Mock Taro
jest.mock('@tarojs/taro', () => ({
  getStorageSync: jest.fn(),
  setStorageSync: jest.fn(),
  makePhoneCall: jest.fn(),
  openLocation: jest.fn()
}));

// Mock NutUI Toast
jest.mock('@nutui/nutui-react-taro', () => ({
  ...jest.requireActual('@nutui/nutui-react-taro'),
  Toast: {
    show: jest.fn()
  }
}));

describe('StationDetail Component', () => {
  const mockStationData: StationDetailData = {
    stationId: 'test_station_001',
    name: 'ÊµãËØïÂÖÖÁîµÁ´ô',
    address: 'ÊµãËØïÂú∞ÂùÄ123Âè∑',
    location: {
      latitude: 39.9042,
      longitude: 116.4074
    },
    distance: 500,
    city: 'Âåó‰∫¨Â∏Ç',
    district: 'ÊúùÈò≥Âå∫',
    province: 'Âåó‰∫¨Â∏Ç',
    
    operator: {
      name: 'ÊµãËØïËøêËê•ÂïÜ',
      phone: '400-123-4567'
    },
    
    piles: [
      {
        pileId: 'pile_001',
        pileNumber: 'A01',
        type: 'DC',
        power: 60,
        voltage: 380,
        current: 125,
        connectorType: ['GB/T', 'CCS'],
        status: 'available',
        price: {
          servicePrice: 0.8,
          electricityPrice: 0.6
        }
      },
      {
        pileId: 'pile_002',
        pileNumber: 'A02',
        type: 'AC',
        power: 7,
        voltage: 220,
        current: 32,
        connectorType: ['GB/T'],
        status: 'occupied',
        price: {
          servicePrice: 0.5,
          electricityPrice: 0.6
        }
      }
    ],
    totalPiles: 2,
    availablePiles: 1,
    
    openTime: {
      start: '06:00',
      end: '22:00',
      is24Hours: false
    },
    
    services: ['parking', 'wifi'],
    
    priceRange: {
      minServicePrice: 0.5,
      maxServicePrice: 0.8,
      minElectricityPrice: 0.6,
      maxElectricityPrice: 0.6
    },
    
    rating: {
      average: 4.5,
      count: 50,
      distribution: {
        5: 25,
        4: 15,
        3: 8,
        2: 2,
        1: 0
      }
    },
    
    images: ['test-image-1.jpg', 'test-image-2.jpg'],
    description: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÖÖÁîµÁ´ô',
    
    contact: {
      phone: '010-12345678'
    },
    
    status: 'active',
    isVerified: true,
    
    stats: {
      totalSessions: 100,
      totalEnergy: 500.5,
      averageSessionDuration: 30,
      peakHours: ['08:00-10:00']
    },
    
    occupancyRate: 50,
    isOpen: true
  };

  const mockProps = {
    stationData: mockStationData,
    loading: false,
    onNavigate: jest.fn(),
    onStartCharging: jest.fn(),
    onFavorite: jest.fn(),
    onRate: jest.fn(),
    onReport: jest.fn(),
    onCall: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÂÖÖÁîµÁ´ôÂü∫Êú¨‰ø°ÊÅØ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('ÊµãËØïÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    expect(getByText('üìç ÊµãËØïÂú∞ÂùÄ123Âè∑')).toBeInTheDocument();
    expect(getByText('üè¢ ÊµãËØïËøêËê•ÂïÜ')).toBeInTheDocument();
    expect(getByText('‚ö° 1/2 ÂèØÁî®')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÂÖÖÁîµÊ°©‰ø°ÊÅØ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('#A01')).toBeInTheDocument();
    expect(getByText('#A02')).toBeInTheDocument();
    expect(getByText('DC')).toBeInTheDocument();
    expect(getByText('AC')).toBeInTheDocument();
    expect(getByText('60kW')).toBeInTheDocument();
    expect(getByText('7kW')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÂÖÖÁîµÊ°©Áä∂ÊÄÅ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('‚úÖ')).toBeInTheDocument(); // availableÁä∂ÊÄÅÂõæÊ†á
    expect(getByText('üîã')).toBeInTheDocument(); // occupiedÁä∂ÊÄÅÂõæÊ†á
    expect(getByText('ÂèØÁî®')).toBeInTheDocument();
    expect(getByText('‰ΩøÁî®‰∏≠')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂØºËà™ÁÇπÂáª', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    const navButton = getByText('üß≠ ÂØºËà™');
    fireEvent.click(navButton);
    
    expect(mockProps.onNavigate).toHaveBeenCalledWith(mockStationData);
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂºÄÂßãÂÖÖÁîµÁÇπÂáª', () => {
    const { getAllByText } = render(<StationDetail {...mockProps} />);
    
    const chargingButtons = getAllByText('ÂºÄÂßãÂÖÖÁîµ');
    fireEvent.click(chargingButtons[0]);
    
    expect(mockProps.onStartCharging).toHaveBeenCalledWith(
      mockStationData,
      mockStationData.piles[0]
    );
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÊî∂ËóèÂäüËÉΩ', async () => {
    const Taro = require('@tarojs/taro');
    Taro.getStorageSync.mockReturnValue([]);
    Taro.setStorageSync.mockResolvedValue(undefined);

    const { getByText } = render(<StationDetail {...mockProps} />);
    
    const favoriteButton = getByText('ü§ç Êî∂Ëóè');
    fireEvent.click(favoriteButton);
    
    await waitFor(() => {
      expect(mockProps.onFavorite).toHaveBeenCalledWith(mockStationData, true);
    });
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÊúçÂä°ËÆæÊñΩ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('üÖøÔ∏è')).toBeInTheDocument(); // ÂÅúËΩ¶Âú∫ÂõæÊ†á
    expect(getByText('üì∂')).toBeInTheDocument(); // WiFiÂõæÊ†á
    expect(getByText('ÂÅúËΩ¶Âú∫')).toBeInTheDocument();
    expect(getByText('WiFi')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫‰ª∑Ê†º‰ø°ÊÅØ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('0.5-0.8ÂÖÉ/kWh')).toBeInTheDocument();
    expect(getByText('0.6-0.6ÂÖÉ/kWh')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ËØÑÂàÜ‰ø°ÊÅØ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('4.5 (50)')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÊã®ÊâìÁîµËØù', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    const phoneCell = getByText('400-123-4567').closest('.contact-cell');
    if (phoneCell) {
      fireEvent.click(phoneCell);
      expect(mockProps.onCall).toHaveBeenCalledWith('400-123-4567');
    }
  });

  it('Â∫îËØ•Âú®Âä†ËΩΩÁä∂ÊÄÅ‰∏ãÊòæÁ§∫Âä†ËΩΩÊåáÁ§∫Âô®', () => {
    const { getByText } = render(
      <StationDetail {...mockProps} loading={true} stationData={undefined} />
    );
    
    expect(getByText('Âä†ËΩΩ‰∏≠...')).toBeInTheDocument();
  });

  it('Â∫îËØ•Âú®Ê≤°ÊúâÊï∞ÊçÆÊó∂ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ', () => {
    const { getByText } = render(
      <StationDetail {...mockProps} loading={false} stationData={undefined} />
    );
    
    expect(getByText('ÂÖÖÁîµÁ´ô‰ø°ÊÅØ‰∏çÂ≠òÂú®')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫Ëê•‰∏öÁä∂ÊÄÅ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('üü¢ Ëê•‰∏ö‰∏≠')).toBeInTheDocument();
    expect(getByText('06:00 - 22:00')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    expect(getByText('100')).toBeInTheDocument(); // ÊÄªÂÖÖÁîµÊ¨°Êï∞
    expect(getByText('500.5')).toBeInTheDocument(); // ÊÄªÂÖÖÁîµÈáè
    expect(getByText('30')).toBeInTheDocument(); // Âπ≥ÂùáÊó∂Èïø
    expect(getByText('50%')).toBeInTheDocument(); // ‰ΩøÁî®Áéá
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂÖÖÁîµÊ°©ËØ¶ÊÉÖÁÇπÂáª', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    const pileCard = getByText('#A01').closest('.pile-card');
    if (pileCard) {
      fireEvent.click(pileCard);
      // Â∫îËØ•ÊòæÁ§∫ÂÖÖÁîµÊ°©ËØ¶ÊÉÖÂºπÁ™ó
      expect(getByText('ÂÖÖÁîµÊ°© #A01')).toBeInTheDocument();
    }
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜËØÑÂàÜÂºπÁ™ó', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    const rateButton = getByText('ËØÑÂàÜ');
    fireEvent.click(rateButton);
    
    expect(getByText('‰∏∫ÂÖÖÁîµÁ´ôËØÑÂàÜ')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÈóÆÈ¢òÂèçÈ¶à', () => {
    const { getByText } = render(<StationDetail {...mockProps} />);
    
    const reportButton = getByText('üö® ÂèçÈ¶àÈóÆÈ¢ò');
    fireEvent.click(reportButton);
    
    // Â∫îËØ•ÊòæÁ§∫ÈóÆÈ¢òÈÄâÊã©ËèúÂçï
    expect(getByText('ËØ∑ÈÄâÊã©ÈóÆÈ¢òÁ±ªÂûã')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫Ë∑ùÁ¶ª‰ø°ÊÅØ', () => {
    const { getByText } = render(
      <StationDetail 
        {...mockProps} 
        currentLocation={{ 
          latitude: 39.9, 
          longitude: 116.4, 
          address: '', 
          city: '', 
          district: '', 
          province: '' 
        }} 
      />
    );
    
    expect(getByText('üìè Ë∑ùÁ¶ªÊÇ® 500m')).toBeInTheDocument();
  });
});