import { View, Text, Button } from '@tarojs/components'\nimport { useState } from 'react'\nimport Taro from '@tarojs/taro'\nimport { useNotification } from '../../contexts/NotificationContext'\nimport request from '../../utils/request'\nimport './index.scss'\n\nconst NotificationTest: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [testResults, setTestResults] = useState<string[]>([])\n  const { \n    notifications, \n    unreadCount, \n    isConnected, \n    error,\n    refreshNotifications,\n    reconnect\n  } = useNotification()\n\n  const addTestResult = (message: string) => {\n    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])\n  }\n\n  const runTest = async (testType: string, testName: string) => {\n    setIsLoading(true)\n    addTestResult(`开始${testName}测试...`)\n    \n    try {\n      const response = await request({\n        url: `/notification-test/${testType}`,\n        method: 'POST'\n      })\n\n      if (response.data.success) {\n        addTestResult(`✅ ${testName}测试成功: ${response.data.message}`)\n      } else {\n        addTestResult(`❌ ${testName}测试失败: ${response.data.message}`)\n      }\n    } catch (error: any) {\n      console.error(`${testName}测试失败:`, error)\n      addTestResult(`❌ ${testName}测试失败: ${error.message || '未知错误'}`)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const runFullSuite = async () => {\n    setIsLoading(true)\n    addTestResult('开始运行完整测试套件...')\n    \n    try {\n      const response = await request({\n        url: '/notification-test/run-full-suite',\n        method: 'POST'\n      })\n\n      if (response.data.success) {\n        addTestResult(`✅ 测试套件启动成功: ${response.data.message}`)\n        addTestResult('请观察通知中心的实时通知')\n      } else {\n        addTestResult(`❌ 测试套件启动失败: ${response.data.message}`)\n      }\n    } catch (error: any) {\n      console.error('测试套件启动失败:', error)\n      addTestResult(`❌ 测试套件启动失败: ${error.message || '未知错误'}`)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getWebSocketStatus = async () => {\n    try {\n      const response = await request({\n        url: '/notification-test/websocket-status',\n        method: 'GET'\n      })\n\n      if (response.data.success) {\n        const { data } = response.data\n        addTestResult(`📡 WebSocket状态:`)\n        addTestResult(`   - 服务已初始化: ${data.isInitialized ? '是' : '否'}`)\n        addTestResult(`   - 在线用户数: ${data.onlineUsers}`)\n        addTestResult(`   - 当前用户在线: ${data.isCurrentUserOnline ? '是' : '否'}`)\n      }\n    } catch (error: any) {\n      addTestResult(`❌ 获取WebSocket状态失败: ${error.message}`)\n    }\n  }\n\n  const clearResults = () => {\n    setTestResults([])\n  }\n\n  const handleReconnect = () => {\n    addTestResult('尝试重新连接WebSocket...')\n    reconnect()\n  }\n\n  return (\n    <View className='notification-test'>\n      <View className='test-header'>\n        <Text className='page-title'>通知系统测试</Text>\n        \n        <View className='connection-status'>\n          <View className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`} />\n          <Text className='status-text'>\n            {isConnected ? '已连接' : '未连接'}\n          </Text>\n          {error && (\n            <Text className='error-text'>({error})</Text>\n          )}\n        </View>\n      </View>\n\n      <View className='notification-stats'>\n        <View className='stat-item'>\n          <Text className='stat-number'>{notifications.length}</Text>\n          <Text className='stat-label'>总通知</Text>\n        </View>\n        <View className='stat-item'>\n          <Text className='stat-number unread'>{unreadCount}</Text>\n          <Text className='stat-label'>未读</Text>\n        </View>\n      </View>\n\n      <View className='test-controls'>\n        <View className='control-section'>\n          <Text className='section-title'>连接控制</Text>\n          <View className='button-row'>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={getWebSocketStatus}\n              disabled={isLoading}\n            >\n              检查连接状态\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={handleReconnect}\n              disabled={isLoading || isConnected}\n            >\n              重新连接\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={refreshNotifications}\n              disabled={isLoading}\n            >\n              刷新通知\n            </Button>\n          </View>\n        </View>\n\n        <View className='control-section'>\n          <Text className='section-title'>单项测试</Text>\n          <View className='button-grid'>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runTest('test-charging', '充电通知')}\n              disabled={isLoading}\n            >\n              充电通知\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runTest('test-payment', '支付通知')}\n              disabled={isLoading}\n            >\n              支付通知\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runTest('test-maintenance', '系统维护')}\n              disabled={isLoading}\n            >\n              系统维护\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runTest('test-priorities', '优先级测试')}\n              disabled={isLoading}\n            >\n              优先级测试\n            </Button>\n          </View>\n        </View>\n\n        <View className='control-section'>\n          <Text className='section-title'>综合测试</Text>\n          <View className='button-row'>\n            <Button \n              className='test-btn primary'\n              size='mini'\n              onClick={runFullSuite}\n              disabled={isLoading}\n            >\n              {isLoading ? '测试中...' : '运行完整测试'}\n            </Button>\n          </View>\n        </View>\n      </View>\n\n      <View className='test-results'>\n        <View className='results-header'>\n          <Text className='results-title'>测试结果</Text>\n          <Button \n            className='clear-btn'\n            size='mini'\n            onClick={clearResults}\n          >\n            清空\n          </Button>\n        </View>\n        \n        <View className='results-content'>\n          {testResults.length > 0 ? (\n            testResults.map((result, index) => (\n              <View key={index} className='result-item'>\n                <Text className='result-text'>{result}</Text>\n              </View>\n            ))\n          ) : (\n            <View className='empty-results'>\n              <Text className='empty-text'>暂无测试结果</Text>\n            </View>\n          )}\n        </View>\n      </View>\n\n      <View className='test-instructions'>\n        <Text className='instructions-title'>使用说明</Text>\n        <Text className='instructions-text'>\n          1. 确保WebSocket连接正常（状态显示为\"已连接\"）{\"\\n\"}\n          2. 点击各种测试按钮发送测试通知{\"\\n\"}\n          3. 观察通知中心是否收到实时通知{\"\\n\"}\n          4. 检查通知的内容、优先级和时间是否正确{\"\\n\"}\n          5. 测试标记已读、删除等功能是否正常\n        </Text>\n      </View>\n    </View>\n  )\n}\n\nexport default NotificationTest"