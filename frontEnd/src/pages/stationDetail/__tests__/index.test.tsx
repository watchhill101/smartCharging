import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import StationDetailPage from '../index';

// Mock Taro
const mockNavigateTo = jest.fn();
const mockGetLocation = jest.fn();
const mockOpenLocation = jest.fn();
const mockGetStorageSync = jest.fn();
const mockSetStorageSync = jest.fn();

jest.mock('@tarojs/taro', () => ({
  useRouter: () => ({
    params: { stationId: 'test_station_001' }
  }),
  navigateTo: mockNavigateTo,
  getLocation: mockGetLocation,
  openLocation: mockOpenLocation,
  getStorageSync: mockGetStorageSync,
  setStorageSync: mockSetStorageSync
}));

// Mock NutUI Toast
const mockToastShow = jest.fn();
jest.mock('@nutui/nutui-react-taro', () => ({
  ...jest.requireActual('@nutui/nutui-react-taro'),
  Toast: {
    show: mockToastShow
  }
}));

describe('StationDetailPage Integration Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockGetLocation.mockResolvedValue({
      latitude: 39.9042,
      longitude: 116.4074
    });
    mockGetStorageSync.mockReturnValue([]);
    mockSetStorageSync.mockResolvedValue(undefined);
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂä†ËΩΩÂíåÊòæÁ§∫ÂÖÖÁîµÁ´ôËØ¶ÊÉÖÈ°µÈù¢', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    // ÂàùÂßãÂ∫îËØ•ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
    expect(getByText('Âä†ËΩΩ‰∏≠...')).toBeInTheDocument();
    
    // Á≠âÂæÖÊï∞ÊçÆÂä†ËΩΩÂÆåÊàê
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    }, { timeout: 2000 });
    
    // È™åËØÅÂü∫Êú¨‰ø°ÊÅØÊòæÁ§∫
    expect(getByText('üìç Âåó‰∫¨Â∏ÇÊúùÈò≥Âå∫Âª∫ÂõΩË∑Ø93Âè∑‰∏áËææÂπøÂú∫B1Â±Ç')).toBeInTheDocument();
    expect(getByText('üè¢ ÂõΩÂÆ∂ÁîµÁΩë')).toBeInTheDocument();
    expect(getByText('‚ö° 2/4 ÂèØÁî®')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÂÖÖÁîµÊ°©‰ø°ÊÅØ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    // È™åËØÅÂÖÖÁîµÊ°©‰ø°ÊÅØ
    expect(getByText('#A01')).toBeInTheDocument();
    expect(getByText('#A02')).toBeInTheDocument();
    expect(getByText('#B01')).toBeInTheDocument();
    expect(getByText('#B02')).toBeInTheDocument();
    
    // È™åËØÅÂÖÖÁîµÊ°©Á±ªÂûãÂíåÂäüÁéá
    expect(getByText('DC')).toBeInTheDocument();
    expect(getByText('AC')).toBeInTheDocument();
    expect(getByText('60kW')).toBeInTheDocument();
    expect(getByText('7kW')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂØºËà™ÂäüËÉΩ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    const navButton = getByText('üß≠ ÂØºËà™');
    fireEvent.click(navButton);
    
    expect(mockOpenLocation).toHaveBeenCalledWith({
      latitude: 39.9042,
      longitude: 116.4074,
      name: '‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô',
      address: 'Âåó‰∫¨Â∏ÇÊúùÈò≥Âå∫Âª∫ÂõΩË∑Ø93Âè∑‰∏áËææÂπøÂú∫B1Â±Ç',
      scale: 18
    });
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂºÄÂßãÂÖÖÁîµÂäüËÉΩ', async () => {
    const { getAllByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getAllByText('ÂºÄÂßãÂÖÖÁîµ')[0]).toBeInTheDocument();
    });
    
    const chargingButtons = getAllByText('ÂºÄÂßãÂÖÖÁîµ');
    fireEvent.click(chargingButtons[0]);
    
    expect(mockNavigateTo).toHaveBeenCalledWith({
      url: '/pages/charging/index?stationId=station_001&pileId=pile_001'
    });
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÊî∂ËóèÂäüËÉΩ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    const favoriteButton = getByText('ü§ç Êî∂Ëóè');
    fireEvent.click(favoriteButton);
    
    await waitFor(() => {
      expect(mockSetStorageSync).toHaveBeenCalledWith(
        'favorite_stations',
        ['station_001']
      );
      expect(mockToastShow).toHaveBeenCalledWith({
        content: 'Â∑≤Ê∑ªÂä†Êî∂Ëóè',
        type: 'success',
        duration: 1500
      });
    });
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÊúçÂä°ËÆæÊñΩ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    // È™åËØÅÊúçÂä°ËÆæÊñΩÂõæÊ†áÂíåÊ†áÁ≠æ
    expect(getByText('üÖøÔ∏è')).toBeInTheDocument();
    expect(getByText('üçΩÔ∏è')).toBeInTheDocument();
    expect(getByText('üöª')).toBeInTheDocument();
    expect(getByText('üì∂')).toBeInTheDocument();
    expect(getByText('üè™')).toBeInTheDocument();
    
    expect(getByText('ÂÅúËΩ¶Âú∫')).toBeInTheDocument();
    expect(getByText('È§êÂéÖ')).toBeInTheDocument();
    expect(getByText('Ê¥óÊâãÈó¥')).toBeInTheDocument();
    expect(getByText('WiFi')).toBeInTheDocument();
    expect(getByText('ÂïÜÂ∫ó')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫‰ª∑Ê†ºÂíåËØÑÂàÜ‰ø°ÊÅØ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    // È™åËØÅ‰ª∑Ê†º‰ø°ÊÅØ
    expect(getByText('0.5-0.8ÂÖÉ/kWh')).toBeInTheDocument();
    expect(getByText('0.6-0.6ÂÖÉ/kWh')).toBeInTheDocument();
    
    // È™åËØÅËØÑÂàÜ‰ø°ÊÅØ
    expect(getByText('4.3 (128)')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫Ëê•‰∏öÊó∂Èó¥ÂíåÁä∂ÊÄÅ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    expect(getByText('üü¢ Ëê•‰∏ö‰∏≠')).toBeInTheDocument();
    expect(getByText('06:00 - 22:00')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    expect(getByText('2456')).toBeInTheDocument(); // ÊÄªÂÖÖÁîµÊ¨°Êï∞
    expect(getByText('18750.5')).toBeInTheDocument(); // ÊÄªÂÖÖÁîµÈáè
    expect(getByText('45')).toBeInTheDocument(); // Âπ≥ÂùáÊó∂Èïø
    expect(getByText('65%')).toBeInTheDocument(); // ‰ΩøÁî®Áéá
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂÖÖÁîµÊ°©ËØ¶ÊÉÖÊü•Áúã', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    const pileCard = getByText('#A01').closest('.pile-card');
    if (pileCard) {
      fireEvent.click(pileCard);
      
      // Â∫îËØ•ÊòæÁ§∫ÂÖÖÁîµÊ°©ËØ¶ÊÉÖÂºπÁ™ó
      await waitFor(() => {
        expect(getByText('ÂÖÖÁîµÊ°© #A01')).toBeInTheDocument();
        expect(getByText('60kW')).toBeInTheDocument();
        expect(getByText('380V')).toBeInTheDocument();
        expect(getByText('125A')).toBeInTheDocument();
        expect(getByText('ÁâπÊù•Áîµ')).toBeInTheDocument();
      });
    }
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜËØÑÂàÜÂäüËÉΩ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    const rateButton = getByText('ËØÑÂàÜ');
    fireEvent.click(rateButton);
    
    expect(getByText('‰∏∫ÂÖÖÁîµÁ´ôËØÑÂàÜ')).toBeInTheDocument();
    
    const submitButton = getByText('Êèê‰∫§ËØÑÂàÜ');
    fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(mockToastShow).toHaveBeenCalledWith({
        content: 'ËØÑÂàÜÊèê‰∫§ÊàêÂäü',
        type: 'success',
        duration: 1500
      });
    });
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÈóÆÈ¢òÂèçÈ¶àÂäüËÉΩ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    const reportButton = getByText('üö® ÂèçÈ¶àÈóÆÈ¢ò');
    fireEvent.click(reportButton);
    
    expect(getByText('ËØ∑ÈÄâÊã©ÈóÆÈ¢òÁ±ªÂûã')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜËÅîÁ≥ªÁîµËØùÂäüËÉΩ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    // ÊµãËØïËøêËê•ÂïÜÁîµËØù
    const operatorPhone = getByText('95598');
    fireEvent.click(operatorPhone);
    
    // ÊµãËØïÂÖÖÁîµÁ´ôÁîµËØù
    const stationPhone = getByText('010-12345678');
    fireEvent.click(stationPhone);
    
    // ÊµãËØïÁ¥ßÊÄ•ÁîµËØù
    const emergencyPhone = getByText('400-123-4567');
    fireEvent.click(emergencyPhone);
  });

  it('Â∫îËØ•Ê≠£Á°ÆËé∑ÂèñÂíåÊòæÁ§∫Áî®Êà∑‰ΩçÁΩÆ', async () => {
    const { getByText } = render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    expect(mockGetLocation).toHaveBeenCalledWith({
      type: 'gcj02'
    });
    
    // È™åËØÅË∑ùÁ¶ªÊòæÁ§∫
    expect(getByText('üìè Ë∑ùÁ¶ªÊÇ® 1.2km')).toBeInTheDocument();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂä†ËΩΩÈîôËØØÊÉÖÂÜµ', async () => {
    // Mock APIË∞ÉÁî®Â§±Ë¥•
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    
    const { getByText } = render(<StationDetailPage />);
    
    // Á≠âÂæÖÂä†ËΩΩÂÆåÊàê
    await waitFor(() => {
      expect(getByText('‰∏áËææÂπøÂú∫ÂÖÖÁîµÁ´ô')).toBeInTheDocument();
    });
    
    consoleSpy.mockRestore();
  });

  it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜ‰ΩçÁΩÆËé∑ÂèñÂ§±Ë¥•', async () => {
    mockGetLocation.mockRejectedValue(new Error('‰ΩçÁΩÆËé∑ÂèñÂ§±Ë¥•'));
    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
    
    render(<StationDetailPage />);
    
    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith('‚ö†Ô∏è Ëé∑Âèñ‰ΩçÁΩÆÂ§±Ë¥•:', expect.any(Error));
    });
    
    consoleSpy.mockRestore();
  });
});