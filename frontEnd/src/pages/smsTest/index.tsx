import { View, Text, Button, Input } from '@tarojs/components'\nimport { useState } from 'react'\nimport Taro from '@tarojs/taro'\nimport request from '../../utils/request'\nimport SmsSettings from '../../components/SmsSettings'\nimport './index.scss'\n\nconst SmsTest: React.FC = () => {\n  const [phoneNumber, setPhoneNumber] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [testResults, setTestResults] = useState<string[]>([])\n  const [showSettings, setShowSettings] = useState(false)\n\n  const addTestResult = (message: string) => {\n    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])\n  }\n\n  const handlePhoneNumberChange = (e: any) => {\n    const value = e.detail.value.replace(/\\D/g, '') // 只保留数字\n    if (value.length <= 11) {\n      setPhoneNumber(value)\n    }\n  }\n\n  const validatePhoneNumber = (): boolean => {\n    if (!phoneNumber) {\n      showToast({\n        title: '请输入手机号',\n        icon: 'error'\n      })\n      return false\n    }\n    \n    if (!/^1[3-9]\\d{9}$/.test(phoneNumber)) {\n      showToast({\n        title: '手机号格式不正确',\n        icon: 'error'\n      })\n      return false\n    }\n    \n    return true\n  }\n\n  const runSmsTest = async (testType: string, testName: string, requireAuth: boolean = true) => {\n    if (!validatePhoneNumber()) return\n    \n    setIsLoading(true)\n    addTestResult(`开始${testName}测试...`)\n    \n    try {\n      const response = await request({\n        url: `/sms-test/${testType}`,\n        method: 'POST',\n        data: { phoneNumber }\n      })\n\n      if (response.data.success) {\n        addTestResult(`✅ ${testName}测试成功: ${response.data.message}`)\n        if (response.data.data?.code) {\n          addTestResult(`   验证码: ${response.data.data.code}`)\n        }\n      } else {\n        addTestResult(`❌ ${testName}测试失败: ${response.data.message}`)\n      }\n    } catch (error: any) {\n      console.error(`${testName}测试失败:`, error)\n      addTestResult(`❌ ${testName}测试失败: ${error.message || '未知错误'}`)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const runFullSuite = async () => {\n    if (!validatePhoneNumber()) return\n    \n    setIsLoading(true)\n    addTestResult('开始运行完整短信测试套件...')\n    \n    try {\n      const response = await request({\n        url: '/sms-test/run-full-suite',\n        method: 'POST',\n        data: { phoneNumber }\n      })\n\n      if (response.data.success) {\n        addTestResult(`✅ 测试套件完成: ${response.data.message}`)\n        \n        const { summary } = response.data.data\n        addTestResult(`   总计: ${summary.total} 条`)\n        addTestResult(`   成功: ${summary.success} 条`)\n        addTestResult(`   失败: ${summary.failed} 条`)\n        addTestResult(`   成功率: ${summary.successRate}`)\n      } else {\n        addTestResult(`❌ 测试套件失败: ${response.data.message}`)\n      }\n    } catch (error: any) {\n      console.error('测试套件失败:', error)\n      addTestResult(`❌ 测试套件失败: ${error.message || '未知错误'}`)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const testSystemMaintenance = async () => {\n    if (!validatePhoneNumber()) return\n    \n    setIsLoading(true)\n    addTestResult('开始系统维护通知测试...')\n    \n    try {\n      const response = await request({\n        url: '/sms-test/test-system-maintenance',\n        method: 'POST',\n        data: { phoneNumbers: [phoneNumber] }\n      })\n\n      if (response.data.success) {\n        addTestResult(`✅ 系统维护通知测试成功: ${response.data.message}`)\n      } else {\n        addTestResult(`❌ 系统维护通知测试失败: ${response.data.message}`)\n      }\n    } catch (error: any) {\n      console.error('系统维护通知测试失败:', error)\n      addTestResult(`❌ 系统维护通知测试失败: ${error.message || '未知错误'}`)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getSmsStatistics = async () => {\n    try {\n      const response = await request({\n        url: '/sms/statistics?timeRange=day',\n        method: 'GET'\n      })\n\n      if (response.data.success) {\n        const { statistics } = response.data.data\n        addTestResult('📊 今日短信统计:')\n        addTestResult(`   总计: ${statistics.total} 条`)\n        addTestResult(`   成功: ${statistics.sent} 条`)\n        addTestResult(`   失败: ${statistics.failed} 条`)\n        addTestResult(`   成功率: ${statistics.successRate.toFixed(1)}%`)\n      }\n    } catch (error: any) {\n      addTestResult(`❌ 获取统计失败: ${error.message}`)\n    }\n  }\n\n  const clearResults = () => {\n    setTestResults([])\n  }\n\n  return (\n    <View className='sms-test'>\n      <View className='test-header'>\n        <Text className='page-title'>短信通知测试</Text>\n        <Button \n          className='settings-btn'\n          size='mini'\n          onClick={() => setShowSettings(true)}\n        >\n          设置\n        </Button>\n      </View>\n\n      <View className='phone-input-section'>\n        <Text className='input-label'>测试手机号</Text>\n        <Input\n          className='phone-input'\n          type='number'\n          placeholder='请输入11位手机号码'\n          value={phoneNumber}\n          onInput={handlePhoneNumberChange}\n          maxlength={11}\n        />\n        {phoneNumber && (\n          <Text className='phone-hint'>\n            {/^1[3-9]\\d{9}$/.test(phoneNumber) ? '✅ 手机号格式正确' : '❌ 手机号格式不正确'}\n          </Text>\n        )}\n      </View>\n\n      <View className='test-controls'>\n        <View className='control-section'>\n          <Text className='section-title'>基础功能测试</Text>\n          <View className='button-grid'>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-verification-code', '验证码短信', false)}\n              disabled={isLoading}\n            >\n              验证码短信\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-charging-started', '充电开始')}\n              disabled={isLoading}\n            >\n              充电开始\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-charging-completed', '充电完成')}\n              disabled={isLoading}\n            >\n              充电完成\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-charging-failed', '充电异常')}\n              disabled={isLoading}\n            >\n              充电异常\n            </Button>\n          </View>\n        </View>\n\n        <View className='control-section'>\n          <Text className='section-title'>支付相关测试</Text>\n          <View className='button-grid'>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-payment-success', '支付成功')}\n              disabled={isLoading}\n            >\n              支付成功\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-payment-failed', '支付失败')}\n              disabled={isLoading}\n            >\n              支付失败\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-balance-low', '余额不足')}\n              disabled={isLoading}\n            >\n              余额不足\n            </Button>\n          </View>\n        </View>\n\n        <View className='control-section'>\n          <Text className='section-title'>优惠券测试</Text>\n          <View className='button-grid'>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-coupon-received', '优惠券到账')}\n              disabled={isLoading}\n            >\n              优惠券到账\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={() => runSmsTest('test-coupon-expiring', '优惠券过期')}\n              disabled={isLoading}\n            >\n              优惠券过期\n            </Button>\n          </View>\n        </View>\n\n        <View className='control-section'>\n          <Text className='section-title'>系统功能测试</Text>\n          <View className='button-row'>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={testSystemMaintenance}\n              disabled={isLoading}\n            >\n              系统维护通知\n            </Button>\n            <Button \n              className='test-btn'\n              size='mini'\n              onClick={getSmsStatistics}\n              disabled={isLoading}\n            >\n              获取统计信息\n            </Button>\n          </View>\n        </View>\n\n        <View className='control-section'>\n          <Text className='section-title'>综合测试</Text>\n          <View className='button-row'>\n            <Button \n              className='test-btn primary'\n              size='mini'\n              onClick={runFullSuite}\n              disabled={isLoading}\n            >\n              {isLoading ? '测试中...' : '运行完整测试'}\n            </Button>\n          </View>\n        </View>\n      </View>\n\n      <View className='test-results'>\n        <View className='results-header'>\n          <Text className='results-title'>测试结果</Text>\n          <Button \n            className='clear-btn'\n            size='mini'\n            onClick={clearResults}\n          >\n            清空\n          </Button>\n        </View>\n        \n        <View className='results-content'>\n          {testResults.length > 0 ? (\n            testResults.map((result, index) => (\n              <View key={index} className='result-item'>\n                <Text className='result-text'>{result}</Text>\n              </View>\n            ))\n          ) : (\n            <View className='empty-results'>\n              <Text className='empty-text'>暂无测试结果</Text>\n            </View>\n          )}\n        </View>\n      </View>\n\n      <View className='test-instructions'>\n        <Text className='instructions-title'>使用说明</Text>\n        <Text className='instructions-text'>\n          1. 输入有效的11位手机号码{\"\\n\"}\n          2. 点击各种测试按钮发送测试短信{\"\\n\"}\n          3. 查看手机是否收到短信通知{\"\\n\"}\n          4. 在设置中可以配置短信通知偏好{\"\\n\"}\n          5. 测试环境使用模拟发送，实际不会产生费用\n        </Text>\n      </View>\n\n      <SmsSettings \n        visible={showSettings}\n        onClose={() => setShowSettings(false)}\n      />\n    </View>\n  )\n}\n\nexport default SmsTest"
import { showToast } from '../utils/toast'