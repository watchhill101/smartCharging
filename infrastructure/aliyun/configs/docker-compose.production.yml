# 生产环境Docker Compose配置

version: '3.8'

services:
  # 主服务 (Node.js)
  main-service:
    image: smartcharging/main-service:latest
    container_name: smartcharging-main-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      ALIPAY_APP_ID: ${ALIPAY_APP_ID}
      ALIPAY_PRIVATE_KEY: ${ALIPAY_PRIVATE_KEY}
      ALIPAY_PUBLIC_KEY: ${ALIPAY_PUBLIC_KEY}
      AMAP_API_KEY: ${AMAP_API_KEY}
      OSS_ACCESS_KEY_ID: ${OSS_ACCESS_KEY_ID}
      OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET}
      OSS_BUCKET_NAME: ${OSS_BUCKET_NAME}
      OSS_REGION: ${OSS_REGION}
    ports:
      - "8080:8080"
    volumes:
      - /opt/smart-charging/logs:/app/logs
      - /opt/smart-charging/uploads:/app/uploads
    networks:
      - smartcharging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 充电服务 (Python)
  charging-service:
    image: smartcharging/charging-service:latest
    container_name: smartcharging-charging-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      CHARGING_SERVICE_PORT: 8081
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: ${REDIS_URL}
      MAIN_SERVICE_URL: http://main-service:8080
      MAIN_SERVICE_API_KEY: ${MAIN_SERVICE_API_KEY}
      OCPP_VERSION: "1.6"
      OCPP_WEBSOCKET_TIMEOUT: 30
      OCPP_HEARTBEAT_INTERVAL: 300
    ports:
      - "8081:8081"
    volumes:
      - /opt/smart-charging/logs:/app/logs
    networks:
      - smartcharging-network
    depends_on:
      - main-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: smartcharging-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /opt/smart-charging/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /opt/smart-charging/nginx/conf.d:/etc/nginx/conf.d:ro
      - /opt/smart-charging/ssl:/etc/ssl:ro
      - /opt/smart-charging/static:/opt/smart-charging/static:ro
      - /var/log/nginx:/var/log/nginx
      - /var/cache/nginx:/var/cache/nginx
    networks:
      - smartcharging-network
    depends_on:
      - main-service
      - charging-service
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smartcharging-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - /opt/smart-charging/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /opt/smart-charging/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - smartcharging-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: smartcharging-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - /opt/smart-charging/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - smartcharging-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # 日志收集 - Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: smartcharging-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - /opt/smart-charging/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /opt/smart-charging/logs:/var/log/smartcharging:ro
      - /var/log/nginx:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - smartcharging-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

volumes:
  prometheus_data:
  grafana_data:

networks:
  smartcharging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16